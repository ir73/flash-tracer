/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CodeForm.java
 *
 * Created on 28.09.2010, 15:13:39
 */

package vizzy.forms.panels;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Rectangle;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import vizzy.model.Conf;
import vizzy.util.StringUtils;

/**
 *
 * @author sergeil
 */
public class CodeForm extends JPanel {
    private int scrollPos;
    private int highlightedLinePos;

    /** Creates new form CodeForm */
    public CodeForm() {
        setBackground(null);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jCodeTextPane = new vizzy.comp.NoWordWrapTextPane();

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportView(jCodeTextPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane jCodeTextPane;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void updateSize() {
        Dimension dim = jCodeTextPane.getPreferredScrollableViewportSize();
        jCodeTextPane.setPreferredSize(dim);
        dim = new Dimension(Math.min(400, dim.width)
                + jScrollPane1.getVerticalScrollBar().getPreferredSize().width,
                getPreferredSize().height);
        setPreferredSize(dim);
        setBounds(0, 0, dim.width, dim.height);
    }

    public void initStyles(Font font) {
        StyledDocument doc = jCodeTextPane.getStyledDocument();
        Style def = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);
        Style s = doc.addStyle("bold", def);
        StyleConstants.setBold(s, true);
        jCodeTextPane.setFont(font);
    }

    public void setText(List<String> lines, int boldLineNum) {
        try {
            StyledDocument doc = jCodeTextPane.getStyledDocument();
            scrollPos = -1;
            highlightedLinePos = -1;
            for (int i = 0; i < lines.size(); i++) {
                String line = lines.get(i) + Conf.newLine;
                if (i == boldLineNum) {
                    highlightedLinePos = doc.getLength();
                    doc.insertString(highlightedLinePos, line, doc.getStyle("bold"));
                    highlightedLinePos += (line.length() - StringUtils.trimStart(line).length());
                } else {
                    int len = doc.getLength();
                    doc.insertString(len, line, doc.getStyle("regular"));
                    if (i == boldLineNum + 3) {
                        scrollPos = len;
                    }
                }
            }
        } catch (BadLocationException ex) {
            Logger.getLogger(CodeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void initUI() {
        jCodeTextPane.requestFocus();
    }

    public void scrollText() {
        if (scrollPos == -1) {
            jCodeTextPane.setCaretPosition(jCodeTextPane.getDocument().getLength());
        } else {
            jCodeTextPane.setCaretPosition(scrollPos);
            if (highlightedLinePos != -1) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        try {
                            Rectangle rect = jCodeTextPane.modelToView(highlightedLinePos);
                            jScrollPane1.getHorizontalScrollBar().setValue((int)(rect.getX()/3*2));
                        } catch (BadLocationException ex) {
                            Logger.getLogger(CodeForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
            }
        }
    }

    public void setFocus() {
        jCodeTextPane.requestFocus();
    }

}
